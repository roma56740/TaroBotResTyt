import os
from uuid import uuid4

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from config import ADMIN_IDS

from config import ADMIN_ID, CONTACT_URL, CONTACT_BUTTON_TEXT
from keyboards import (
    get_user_keyboard, get_admin_keyboard,
    get_settings_keyboard, get_greeting_menu,
    get_reviews_menu, get_reviews_delete_keyboard,
    get_services_menu, get_services_view_keyboard, get_services_delete_keyboard, get_skip_file_keyboard,
    get_gifts_menu, get_gifts_view_keyboard, get_gifts_delete_keyboard,
    get_user_reviews_keyboard, get_user_services_keyboard, get_user_gifts_keyboard,
    get_contacts_keyboard
)
from database import (
    save_greeting, get_greeting,
    add_review, list_reviews, count_reviews, delete_review, get_review_by_id,
    add_service, list_services, count_services, delete_service, get_service_by_id,
    add_gift, list_gifts, count_gifts, delete_gift, get_gift_by_id
)

router = Router()

GREETING_FOLDER = "media/greetings"
SERVICES_FOLDER = "media/services"
GIFTS_FOLDER = "media/gifts"
PAGE_SIZE = 5

IMG_FOLDER = "media/img"
BTN_IMG = {
    "reviews": "Otz.png",
    "gifts":   "Sur.png",
    "services":"Tool.png",
    "contacts":"Call.png",
}

# ============ helpers ============

def _img_path(key: str) -> str | None:
    """–í–µ—Ä–Ω—ë—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    name = BTN_IMG.get(key)
    if not name:
        return None
    path = os.path.join(IMG_FOLDER, name)
    return path if os.path.exists(path) else None


async def _remember(state: FSMContext, msg):
    data = await state.get_data()
    cleanup = data.get("cleanup", [])
    cleanup.append((msg.chat.id, msg.message_id))
    await state.update_data(cleanup=cleanup)

async def _purge(state: FSMContext, bot: Bot):
    data = await state.get_data()
    for chat_id, mid in data.get("cleanup", []):
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    await state.update_data(cleanup=[])

def _is_image(filepath: str) -> bool:
    ext = os.path.splitext(filepath.lower())[1]
    return ext in {".jpg", ".jpeg", ".png", ".webp"}


# ============ FSM ============

class GreetingFSM(StatesGroup):
    waiting_for_photo = State()
    waiting_for_text = State()

class ReviewFSM(StatesGroup):
    waiting_author = State()
    waiting_text = State()
    waiting_date = State()

class ServiceFSM(StatesGroup):
    waiting_name = State()
    waiting_desc = State()
    waiting_file = State()

class GiftFSM(StatesGroup):
    waiting_name = State()
    waiting_desc = State()
    waiting_file = State()


# =====================================================================
#                              /start
# =====================================================================

@router.message(CommandStart())
async def cmd_start(message: Message):
    if message.from_user.id in ADMIN_IDS:
        text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "‚Ä¢ <b>üìä –ê–Ω–∞–ª–∏–∑</b> ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
            "‚Ä¢ <b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –æ—Ç–∑—ã–≤–æ–≤, —É—Å–ª—É–≥ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
            "–ì–æ—Ç–æ–≤—ã —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é? ‚ú®"
        )
        await message.answer(text, reply_markup=get_admin_keyboard(), parse_mode="HTML")
        return

    greeting = get_greeting()
    if greeting and greeting[0] and os.path.exists(greeting[0]):
        await message.answer_photo(
            FSInputFile(greeting[0]),
            caption=greeting[1],
            reply_markup=get_user_keyboard()
        )
    else:
        text = (
            "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à –≥–∏–¥ –ø–æ –Ω–∞—à–µ–º—É –º–∏—Ä—É:\n\n"
            "‚Ä¢ <b>üí¨ –û—Ç–∑—ã–≤—ã</b> ‚Äî –ø–æ—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –æ –Ω–∞—Å —Ä–µ–∞–ª—å–Ω—ã–µ –ª—é–¥–∏.\n"
            "‚Ä¢ <b>üéÅ –ü–æ–¥–∞—Ä–æ–∫</b> ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã.\n"
            "‚Ä¢ <b>üõ† –£—Å–ª—É–≥–∏</b> ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å.\n"
            "‚Ä¢ <b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</b> ‚Äî –±—ã—Å—Ç—Ä–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.\n\n"
            "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ –∏ –ø–æ–µ—Ö–∞–ª–∏! üöÄ"
        )
        await message.answer(text, reply_markup=get_user_keyboard(), parse_mode="HTML")


# =====================================================================
#                               –ê–î–ú–ò–ù
# =====================================================================

# ---------- –ê–Ω–∞–ª–∏–∑ ----------
@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑")
async def admin_analytics(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    total_reviews = count_reviews()
    total_services = count_services()
    total_gifts = count_gifts()
    text = (
        "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        f"üí¨ –û—Ç–∑—ã–≤–æ–≤: <b>{total_reviews}</b>\n"
        f"üõ† –£—Å–ª—É–≥: <b>{total_services}</b>\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <b>{total_gifts}</b>\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî —ç—Ç–æ –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ –¥–æ–≤–µ—Ä–∏—é –∏ –ø—Ä–æ–¥–∞–∂–∞–º.üî•"
    )
    await message.answer(text, parse_mode="HTML")


# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    if message.from_user.id == ADMIN_ID:
        text = (
            "üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?\n"
            "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ä–µ—à–∞–µ—Ç –≤—Å—ë.\n"
            "‚Ä¢ –û—Ç–∑—ã–≤—ã ‚Äî —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ.\n"
            "‚Ä¢ –£—Å–ª—É–≥–∏ ‚Äî –≤–∞—à–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞.\n"
            "‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏ ‚Äî ¬´–≤–∞—É¬ª-—ç—Ñ—Ñ–µ–∫—Ç –∏ –ª—é–±–æ–≤—å –∫–ª–∏–µ–Ω—Ç–æ–≤. üíù"
        )
        await message.answer(text, reply_markup=get_settings_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    text = (
        "üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    )
    await callback.message.edit_text(text, reply_markup=get_settings_keyboard(), parse_mode="HTML")


# ---------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ----------
@router.callback_query(F.data == "greeting_menu")
async def greeting_menu(callback: CallbackQuery):
    text = (
        "üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
        "–°–¥–µ–ª–∞–π—Ç–µ –≤—Ö–æ–¥ —è—Ä–∫–∏–º: –∫–∞—Ä—Ç–∏–Ω–∫–∞ + –∫–æ—Ä–æ—Ç–∫–æ–µ, —Ü–µ–ø–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await callback.message.edit_text(text, reply_markup=get_greeting_menu(), parse_mode="HTML")

@router.callback_query(F.data == "view_greeting")
async def view_greeting(callback: CallbackQuery):
    greeting = get_greeting()
    if greeting and greeting[0] and os.path.exists(greeting[0]):
        await callback.message.answer_photo(FSInputFile(greeting[0]), caption=greeting[1])
    else:
        await callback.message.answer("‚ùó –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç.")

@router.callback_query(F.data == "edit_greeting")
async def edit_greeting(callback: CallbackQuery, state: FSMContext):
    os.makedirs(GREETING_FOLDER, exist_ok=True)
    prompt = await callback.message.answer(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ</b> –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.\n\n"
        "–°–æ–≤–µ—Ç: —Å–≤–µ—Ç–ª–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ. ‚ú®",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(GreetingFSM.waiting_for_photo)

@router.message(GreetingFSM.waiting_for_photo, F.photo)
async def receive_photo(message: Message, state: FSMContext, bot: Bot):
    tg_file = await bot.get_file(message.photo[-1].file_id)
    filename = f"{uuid4()}.jpg"
    path = os.path.join(GREETING_FOLDER, filename)
    await bot.download_file(tg_file.file_path, path)

    await state.update_data(photo_path=path)
    await _remember(state, message)

    prompt = await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.\n\n"
        "–õ—É—á—à–µ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É: —Ü–µ–Ω–Ω–æ—Å—Ç—å + –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é. üí°",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(GreetingFSM.waiting_for_text)

@router.message(GreetingFSM.waiting_for_text)
async def receive_text(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await _remember(state, message)
    save_greeting(data["photo_path"], message.text)

    await _purge(state, bot)
    await state.clear()
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∂–µ—Ç: ¬´–í–∞—É!¬ª üòç")


# ---------- –û—Ç–∑—ã–≤—ã (–∞–¥–º–∏–Ω) ----------
@router.callback_query(F.data == "edit_reviews")
async def reviews_root(callback: CallbackQuery):
    text = (
        "üóÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏</b>\n\n"
        "–î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–µ—Ä–∂–∏—Ç–µ –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏.\n"
        "–ü–∞—Ä–∞ –∫–ª–∏–∫–æ–≤ ‚Äî –∏ –¥–æ–≤–µ—Ä–∏–µ —Ä–∞—Å—Ç—ë—Ç. üìà"
    )
    await callback.message.edit_text(text, reply_markup=get_reviews_menu(), parse_mode="HTML")

@router.callback_query(F.data == "greeting_reviews_back")
async def reviews_back(callback: CallbackQuery):
    await reviews_root(callback)  # —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç

@router.callback_query(F.data == "reviews_add")
async def reviews_add_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    prompt = await callback.message.answer(
        "üßë –í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û</b> –∏–ª–∏ <b>@username</b> –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞:",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(ReviewFSM.waiting_author)

@router.message(ReviewFSM.waiting_author, F.text.len() > 0)
async def reviews_add_author(message: Message, state: FSMContext):
    await state.update_data(author=message.text.strip())
    await _remember(state, message)
    prompt = await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> –æ—Ç–∑—ã–≤–∞:", parse_mode="HTML")
    await _remember(state, prompt)
    await state.set_state(ReviewFSM.waiting_text)

@router.message(ReviewFSM.waiting_text, F.text.len() > 0)
async def reviews_add_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text.strip())
    await _remember(state, message)
    prompt = await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07.08.2025):", parse_mode="HTML")
    await _remember(state, prompt)
    await state.set_state(ReviewFSM.waiting_date)

@router.message(ReviewFSM.waiting_date, F.text.len() > 0)
async def reviews_add_date(message: Message, state: FSMContext, bot: Bot):
    d = await state.get_data()
    await _remember(state, message)
    add_review(d["author"], d["text"], message.text.strip())
    await _purge(state, bot)
    await state.clear()
    await message.answer("‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ, —ç—Ç–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç –Ω–∞—à –±—Ä–µ–Ω–¥. üí™")

@router.callback_query(F.data.startswith("reviews_delete_page:"))
async def reviews_delete_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
    total = count_reviews()
    items = list_reviews(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    if not items:
        await callback.message.edit_text("–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π ‚Äî –∏ –Ω–∞—á–Ω—ë—Ç—Å—è –º–∞–≥–∏—è! ‚ú®", reply_markup=get_reviews_menu())
        return
    text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page+1}</b> ‚Ä¢ –í—Å–µ–≥–æ: <b>{total}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤:"
    await callback.message.edit_text(text, reply_markup=get_reviews_delete_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")

@router.callback_query(F.data.startswith("reviews_delete_id:"))
async def reviews_delete_id(callback: CallbackQuery):
    _, rid, page = callback.data.split(":")
    rid, page = int(rid), int(page)
    delete_review(rid)
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ", show_alert=False)

    total = count_reviews()
    if total == 0:
        await callback.message.edit_text("–í—Å–µ –æ—Ç–∑—ã–≤—ã —É–¥–∞–ª–µ–Ω—ã. –ß–∏—Å—Ç–æ –∫–∞–∫ –≤ –æ–∫–µ–∞–Ω–µ –ø–æ—Å–ª–µ —à—Ç–æ—Ä–º–∞. üåä", reply_markup=get_reviews_menu())
        return
    page = min(page, max((total - 1) // PAGE_SIZE, 0))
    items = list_reviews(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page+1}</b> ‚Ä¢ –í—Å–µ–≥–æ: <b>{total}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤:"
    await callback.message.edit_text(text, reply_markup=get_reviews_delete_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")


# ---------- –£—Å–ª—É–≥–∏ (–∞–¥–º–∏–Ω) ----------
@router.callback_query(F.data == "services_menu")
async def services_menu(callback: CallbackQuery):
    text = (
        "üõ† <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã ‚Äî –∏ –∫–ª–∏–µ–Ω—Ç—É —Å—Ç–∞–Ω–µ—Ç –ø–æ–Ω—è—Ç–Ω–µ–µ, –∑–∞—á–µ–º –≤—ã –µ–º—É. üíº"
    )
    await callback.message.edit_text(text, reply_markup=get_services_menu(), parse_mode="HTML")

@router.callback_query(F.data.startswith("services_view_page:"))
async def services_view_page(callback: CallbackQuery):
    try:
        page = int(callback.data.split(":")[1])
    except Exception:
        page = 0

    total = count_services()

    # –ö–æ–≥–¥–∞ —É—Å–ª—É–≥ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    if total == 0:
        text = "–ü–æ–∫–∞ —É—Å–ª—É–≥ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é ‚Äî –∏ –Ω–∞—á–Ω—ë–º –ø—Ä–æ–¥–∞–≤–∞—Ç—å! üöÄ"
        kb = get_services_menu()
        try:
            if callback.message.text:
                if callback.message.text == text:
                    # –¢–∞–∫–æ–π –∂–µ —Ç–µ–∫—Å—Ç ‚Äî –æ–±–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É
                    await callback.message.edit_reply_markup(reply_markup=kb)
                else:
                    await callback.message.edit_text(text, reply_markup=kb)
            else:
                await callback.message.answer(text, reply_markup=kb)
        except TelegramBadRequest:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, reply_markup=kb)
        return

    # –ï—Å—Ç—å —É—Å–ª—É–≥–∏ ‚Äî —Ä–∏—Å—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    items = list_services(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    blocks = []
    for _id, name, desc, file_path in items:
        line = f"‚Ä¢ <b>{name}</b>\n{desc[:300]}"
        if file_path:
            line += "\nüìé –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ"
        blocks.append(line)

    text = f"üëÄ <b>–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥</b> ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b>\n\n" + "\n\n".join(blocks)
    kb = get_services_view_keyboard(page, PAGE_SIZE, total)

    try:
        if callback.message.text:
            if callback.message.text == text:
                await callback.message.edit_reply_markup(reply_markup=kb)
            else:
                await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        else:
            await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data == "services_add")
async def services_add_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    prompt = await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</b>.\n\n"
        "–°–µ–∫—Ä–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ + –≤—ã–≥–æ–¥–∞. üòâ",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(ServiceFSM.waiting_name)

@router.message(ServiceFSM.waiting_name, F.text.len() > 0)
async def services_add_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await _remember(state, message)
    prompt = await message.answer(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ <b>—Å—É—Ç—å —É—Å–ª—É–≥–∏</b>: —á—Ç–æ –¥–µ–ª–∞–µ–º, –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤ —á—ë–º —Ü–µ–Ω–Ω–æ—Å—Ç—å.",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(ServiceFSM.waiting_desc)

@router.message(ServiceFSM.waiting_desc, F.text.len() > 0)
async def services_add_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await _remember(state, message)
    os.makedirs(SERVICES_FOLDER, exist_ok=True)
    prompt = await message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Ñ–∞–π–ª</b> (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.\n\n"
        "–í–∏–∑—É–∞–ª –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é! üß≤",
        parse_mode="HTML",
        reply_markup=get_skip_file_keyboard()
    )
    await _remember(state, prompt)
    await state.set_state(ServiceFSM.waiting_file)

# –ø—Ä–∏–Ω–∏–º–∞–µ–º –ò —Å—Ç–∞—Ä—ã–π, –∏ –Ω–æ–≤—ã–π –∫–æ–ª–ª–±—ç–∫: services_skip_file / skip_file
@router.callback_query((F.data == "services_skip_file") | (F.data == "skip_file"))
async def services_or_gifts_skip_file(callback: CallbackQuery, state: FSMContext, bot: Bot):
    state_name = (await state.get_state()) or ""
    data = await state.get_data()
    if state_name.startswith("ServiceFSM"):
        add_service(data["name"], data["description"], None)
        msg = "‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–±–µ–∑ —Ñ–∞–π–ª–∞). –ß—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É!"
    else:
        # GiftFSM
        add_gift(data["name"], data["description"], None)
        msg = "‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω (–±–µ–∑ —Ñ–∞–π–ª–∞). –ü—É—Å—Ç—å –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏!"
    await _purge(state, bot)
    await state.clear()
    await callback.message.answer(msg)

@router.message(ServiceFSM.waiting_file, F.photo | F.document)
async def services_add_file(message: Message, state: FSMContext, bot: Bot):
    os.makedirs(SERVICES_FOLDER, exist_ok=True)
    file_path = None
    if message.photo:
        tg_file = await bot.get_file(message.photo[-1].file_id)
        file_path = os.path.join(SERVICES_FOLDER, f"{uuid4()}.jpg")
        await bot.download_file(tg_file.file_path, file_path)
    elif message.document:
        doc = message.document
        tg_file = await bot.get_file(doc.file_id)
        ext = os.path.splitext(doc.file_name or "")[1] or ".bin"
        file_path = os.path.join(SERVICES_FOLDER, f"{uuid4()}{ext if len(ext) <= 10 else '.bin'}")
        await bot.download_file(tg_file.file_path, file_path)

    await _remember(state, message)
    d = await state.get_data()
    add_service(d["name"], d["description"], file_path)

    await _purge(state, bot)
    await state.clear()
    await message.answer("‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°—É–ø–µ—Ä! üî•")

@router.callback_query(F.data.startswith("services_delete_page:"))
async def services_delete_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
    total = count_services()
    if total == 0:
        await callback.message.edit_text("–ü–æ–∫–∞ —É—Å–ª—É–≥ –Ω–µ—Ç. –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é. ‚ú®", reply_markup=get_services_menu())
        return
    items = list_services(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page+1}</b> ‚Ä¢ –í—Å–µ–≥–æ: <b>{total}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
    await callback.message.edit_text(text, reply_markup=get_services_delete_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")

@router.callback_query(F.data.startswith("services_delete_id:"))
async def services_delete_id(callback: CallbackQuery):
    _, sid, page = callback.data.split(":")
    sid, page = int(sid), int(page)
    delete_service(sid)
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ", show_alert=False)

    total = count_services()
    if total == 0:
        await callback.message.edit_text("–í—Å–µ —É—Å–ª—É–≥–∏ —É–¥–∞–ª–µ–Ω—ã. –í–æ–∑—å–º—ë–º –∫—É—Ä—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! üß≠", reply_markup=get_services_menu())
        return
    page = min(page, max((total - 1) // PAGE_SIZE, 0))
    items = list_services(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page+1}</b> ‚Ä¢ –í—Å–µ–≥–æ: <b>{total}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
    await callback.message.edit_text(text, reply_markup=get_services_delete_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")


# ---------- –ü–æ–¥–∞—Ä–∫–∏ (–∞–¥–º–∏–Ω) ----------
@router.callback_query(F.data == "gifts_menu")
async def gifts_menu(callback: CallbackQuery):
    text = (
        "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å —Ä–æ–∂–¥–∞—é—Ç—Å—è —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∞–∫—Ü–∏–∏ –∏ –º–∞–≥–∏—è ¬´–ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–∏—Ç—å¬ª. ‚ú®"
    )
    await callback.message.edit_text(text, reply_markup=get_gifts_menu(), parse_mode="HTML")

@router.callback_query(F.data.startswith("gifts_view_page:"))
async def gifts_view_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
    total = count_gifts()
    if total == 0:
        await callback.message.edit_text("–ü–æ–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ ‚Äî –∏ –∑–∞–∏—Å–∫—Ä–∏—Ç—Å—è! ‚ú®", reply_markup=get_gifts_menu())
        return
    items = list_gifts(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    blocks = []
    for _id, name, desc, file_path in items:
        line = f"‚Ä¢ <b>{name}</b>\n{desc[:300]}"
        if file_path:
            line += "\nüìé –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ"
        blocks.append(line)
    text = f"üëÄ <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤</b> ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b>\n\n" + "\n\n".join(blocks)
    await callback.message.edit_text(text, reply_markup=get_gifts_view_keyboard(page, PAGE_SIZE, total), parse_mode="HTML")

@router.callback_query(F.data == "gifts_add")
async def gifts_add_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    prompt = await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞</b>.\n\n"
        "–•–æ—Ä–æ—à–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏—é –∏ –∂–µ–ª–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç—å. üíû",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(GiftFSM.waiting_name)

@router.message(GiftFSM.waiting_name, F.text.len() > 0)
async def gifts_add_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await _remember(state, message)
    prompt = await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞</b> ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, –≤–∫—É—Å–Ω–æ, —Å –≤—ã–≥–æ–¥–æ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.",
        parse_mode="HTML"
    )
    await _remember(state, prompt)
    await state.set_state(GiftFSM.waiting_desc)

@router.message(GiftFSM.waiting_desc, F.text.len() > 0)
async def gifts_add_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await _remember(state, message)
    os.makedirs(GIFTS_FOLDER, exist_ok=True)
    prompt = await message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Ñ–∞–π–ª</b> (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.\n"
        "–ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–∑—É–∞–ª ‚Äî –ø–æ–ª–¥–µ–ª–∞! üî•",
        parse_mode="HTML",
        reply_markup=get_skip_file_keyboard()
    )
    await _remember(state, prompt)
    await state.set_state(GiftFSM.waiting_file)

@router.message(GiftFSM.waiting_file, F.photo | F.document)
async def gifts_add_file(message: Message, state: FSMContext, bot: Bot):
    os.makedirs(GIFTS_FOLDER, exist_ok=True)
    file_path = None
    if message.photo:
        tg_file = await bot.get_file(message.photo[-1].file_id)
        file_path = os.path.join(GIFTS_FOLDER, f"{uuid4()}.jpg")
        await bot.download_file(tg_file.file_path, file_path)
    elif message.document:
        doc = message.document
        tg_file = await bot.get_file(doc.file_id)
        ext = os.path.splitext(doc.file_name or "")[1] or ".bin"
        file_path = os.path.join(GIFTS_FOLDER, f"{uuid4()}{ext if len(ext) <= 10 else '.bin'}")
        await bot.download_file(tg_file.file_path, file_path)

    await _remember(state, message)
    d = await state.get_data()
    add_gift(d["name"], d["description"], file_path)

    await _purge(state, bot)
    await state.clear()
    await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω! –ü—É—Å—Ç—å —Ä–∞–¥—É–µ—Ç –ª—é–¥–µ–π. üéâ")

@router.callback_query(F.data.startswith("gifts_delete_page:"))
async def gifts_delete_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
    total = count_gifts()
    if total == 0:
        await callback.message.edit_text("–ü–æ–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. –ù–æ —ç—Ç–æ –ª–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å üòâ", reply_markup=get_gifts_menu())
        return
    items = list_gifts(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page+1}</b> ‚Ä¢ –í—Å–µ–≥–æ: <b>{total}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:"
    await callback.message.edit_text(text, reply_markup=get_gifts_delete_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")

@router.callback_query(F.data.startswith("gifts_delete_id:"))
async def gifts_delete_id(callback: CallbackQuery):
    _, gid, page = callback.data.split(":")
    gid, page = int(gid), int(page)
    delete_gift(gid)
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ", show_alert=False)

    total = count_gifts()
    if total == 0:
        await callback.message.edit_text("–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –°–≤–æ–±–æ–¥–Ω–æ –¥—ã—à–∏–º –∏ –≥–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–µ! üå¨Ô∏è", reply_markup=get_gifts_menu())
        return
    page = min(page, max((total - 1) // PAGE_SIZE, 0))
    items = list_gifts(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page+1}</b> ‚Ä¢ –í—Å–µ–≥–æ: <b>{total}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:"
    await callback.message.edit_text(text, reply_markup=get_gifts_delete_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")


# =====================================================================
#                             –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
# =====================================================================

# ----- –û—Ç–∑—ã–≤—ã -----
@router.message(F.text == "üí¨ –û—Ç–∑—ã–≤—ã")
async def u_reviews_root(message: Message):
    total = count_reviews()
    caption = (
        "üí¨ <b>–û—Ç–∑—ã–≤—ã</b>\n\n"
        "–ñ–∏–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Äî –ª—É—á—à–µ –≤—Å—è–∫–æ–π —Ä–µ–∫–ª–∞–º—ã. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é. üëá"
    )
    items = list_reviews(offset=0, limit=PAGE_SIZE)

    # –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    img = _img_path("reviews")
    if img:
        kb = get_user_reviews_keyboard(0, PAGE_SIZE, total, items) if total > 0 else None
        await message.answer_photo(FSInputFile(img), caption=caption, parse_mode="HTML", reply_markup=kb)
    else:
        if total == 0:
            await message.answer("‚ú® –ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç. –ù–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!", parse_mode="HTML")
        else:
            await message.answer(caption, reply_markup=get_user_reviews_keyboard(0, PAGE_SIZE, total, items), parse_mode="HTML")


@router.callback_query(F.data.startswith("u_reviews_page:"))
async def u_reviews_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
    total = count_reviews()
    items = list_reviews(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    if not items:
        await callback.answer("–ë–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç. üìö", show_alert=True)
        return
    text = (
        f"üí¨ <b>–û—Ç–∑—ã–≤—ã</b> ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º."
    )
    await callback.message.edit_text(text, reply_markup=get_user_reviews_keyboard(page, PAGE_SIZE, total, items), parse_mode="HTML")

@router.callback_query(F.data.startswith("u_review_id:"))
async def u_review_open(callback: CallbackQuery):
    # u_review_id:{id}:{page}
    try:
        _, rid, page = callback.data.split(":")
        rid, page = int(rid), int(page)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    row = get_review_by_id(rid)
    if not row:
        await callback.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    _id, author, text, date = row
    msg = f"üßë <b>{author}</b>\nüóì {date}\n\n{(text or '').strip()}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"u_reviews_page:{page}")]
    ])

    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —É –Ω–µ–≥–æ –Ω–µ—Ç .text, —Ç–æ–≥–¥–∞ —à–ª—ë–º –Ω–æ–≤–æ–µ
    try:
        if callback.message.text:
            await callback.message.edit_text(msg, reply_markup=kb, parse_mode="HTML")
        else:
            await callback.message.answer(msg, reply_markup=kb, parse_mode="HTML")
    except TelegramBadRequest:
        # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ Telegram —Ä—É–≥–∞–µ—Ç—Å—è
        await callback.message.answer(msg, reply_markup=kb, parse_mode="HTML")



# ----- –£—Å–ª—É–≥–∏ -----
@router.message(F.text == "üõ† –£—Å–ª—É–≥–∏")
async def u_services_root(message: Message):
    total = count_services()
    caption = (
        "üõ† <b>–£—Å–ª—É–≥–∏</b>\n\n"
        "–ù–∞—à–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ ‚Äî –≤–∞—à–∞ —Å–∏–ª–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è. üëá"
    )
    items = list_services(offset=0, limit=PAGE_SIZE)

    img = _img_path("services")
    if img:
        kb = get_user_services_keyboard(0, PAGE_SIZE, total, items) if total > 0 else None
        await message.answer_photo(FSInputFile(img), caption=caption, parse_mode="HTML", reply_markup=kb)
    else:
        if total == 0:
            await message.answer("‚ú® –ü–æ–∫–∞ —É—Å–ª—É–≥ –Ω–µ—Ç. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!", parse_mode="HTML")
        else:
            await message.answer(caption, reply_markup=get_user_services_keyboard(0, PAGE_SIZE, total, items), parse_mode="HTML")


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –£—Å–ª—É–≥–∏ ‚Äî –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
@router.callback_query(F.data.startswith("u_services_page:"))
async def u_services_page(callback: CallbackQuery):
    try:
        page = int(callback.data.split(":")[1])
    except Exception:
        page = 0
    total = count_services()
    items = list_services(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    if not items:
        await callback.answer("–ë–æ–ª—å—à–µ —É—Å–ª—É–≥ –Ω–µ—Ç. üìò", show_alert=True)
        return

    text = f"üõ† <b>–£—Å–ª—É–≥–∏</b> ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∏–∂–µ."
    kb = get_user_services_keyboard(page, PAGE_SIZE, total, items)

    # –ï—Å–ª–∏ —Ç–µ–∫sta –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.text:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("u_service_id:"))
async def u_service_open(callback: CallbackQuery):
    try:
        _, sid, page = callback.data.split(":")
        sid, page = int(sid), int(page)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    row = get_service_by_id(sid)
    if not row:
        await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    _id, name, description, file_path = row
    text = f"üõ† <b>{name}</b>\n\n{description}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"u_services_page:{page}")]
    ])
    if file_path and os.path.exists(file_path):
        if _is_image(file_path):
            await callback.message.answer_photo(FSInputFile(file_path), caption=text, parse_mode="HTML", reply_markup=kb)
        else:
            await callback.message.answer_document(FSInputFile(file_path), caption=text, parse_mode="HTML", reply_markup=kb)
    else:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")


# ----- –ü–æ–¥–∞—Ä–æ–∫ -----
@router.message(F.text == "üéÅ –ü–æ–¥–∞—Ä–æ–∫")
async def u_gifts_root(message: Message):
    total = count_gifts()
    caption = (
        "üéÅ <b>–ü–æ–¥–∞—Ä–∫–∏</b>\n\n"
        "–°–∞–º—ã–µ —Ç—ë–ø–ª—ã–µ –±–æ–Ω—É—Å—ã –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –∑–∞–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë. üëá"
    )
    items = list_gifts(offset=0, limit=PAGE_SIZE)

    img = _img_path("gifts")
    if img:
        kb = get_user_gifts_keyboard(0, PAGE_SIZE, total, items) if total > 0 else None
        await message.answer_photo(FSInputFile(img), caption=caption, parse_mode="HTML", reply_markup=kb)
    else:
        if total == 0:
            await message.answer("‚ú® –ü–æ–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã. üéÄ", parse_mode="HTML")
        else:
            await message.answer(caption, reply_markup=get_user_gifts_keyboard(0, PAGE_SIZE, total, items), parse_mode="HTML")


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–æ–¥–∞—Ä–∫–∏ ‚Äî –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
@router.callback_query(F.data.startswith("u_gifts_page:"))
async def u_gifts_page(callback: CallbackQuery):
    try:
        page = int(callback.data.split(":")[1])
    except Exception:
        page = 0
    total = count_gifts()
    items = list_gifts(offset=page * PAGE_SIZE, limit=PAGE_SIZE)
    if not items:
        await callback.answer("–ë–æ–ª—å—à–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. üéÅ", show_alert=True)
        return

    text = f"üéÅ <b>–ü–æ–¥–∞—Ä–∫–∏</b> ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∏–∂–µ."
    kb = get_user_gifts_keyboard(page, PAGE_SIZE, total, items)

    if callback.message.text:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("u_gift_id:"))
async def u_gift_open(callback: CallbackQuery):
    try:
        _, gid, page = callback.data.split(":")
        gid, page = int(gid), int(page)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    row = get_gift_by_id(gid)
    if not row:
        await callback.answer("–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    _id, name, description, file_path = row
    text = f"üéÅ <b>{name}</b>\n\n{description}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"u_gifts_page:{page}")]
    ])
    if file_path and os.path.exists(file_path):
        if _is_image(file_path):
            await callback.message.answer_photo(FSInputFile(file_path), caption=text, parse_mode="HTML", reply_markup=kb)
        else:
            await callback.message.answer_document(FSInputFile(file_path), caption=text, parse_mode="HTML", reply_markup=kb)
    else:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")


# ----- –ö–æ–Ω—Ç–∞–∫—Ç—ã -----
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def u_contacts(message: Message):
    caption = (
        "üìû <b>–û—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Å–≤—è–∑–∏!</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ –º—ã —É–∂–µ —Ä—è–¥–æ–º. –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–º —Å—Ä–∞–∑—É, "
        "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—ë–º—Å—è —Å –ª—É—á—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º. üí¨"
    )
    img = _img_path("contacts")
    kb = get_contacts_keyboard(CONTACT_URL, CONTACT_BUTTON_TEXT)

    if img:
        await message.answer_photo(FSInputFile(img), caption=caption, parse_mode="HTML", reply_markup=kb)
    else:
        await message.answer(caption, reply_markup=kb, parse_mode="HTML")

